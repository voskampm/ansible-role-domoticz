#!/bin/bash

set -u # Don't use undefined variables
#set -e # Exit on error
 
# Domoticz knows the total number of Kwh generated by the Solar inverter but does not record it for later usage. If you want to record it
# you can create a dummy device in Domoticz and then create a virtual 'sensor'. This scripts uploads data to that virtual 'sensor'.

# This script uses regex checks that have been introduced in Bash 3.x in 2015

IDX_INPUT=2
IDX_OUTPUT_TOTAL=20
IDX_OUTPUT_TODAY=21
METER_TYPE="SBFSpot (SMA)"
DOMOTICZ_SERVER=127.0.0.1
DOMOTICZ_SERVER_HTTPS_PORT=8081
MOSQUITTO_SERVER=127.0.0.1
MOSQUITTO_PORT=1883

# Fetch Solar data from meter  (use jq to parse JSON object correctly)
SBFSPOT_DATA=`curl -k -s "https://${DOMOTICZ_SERVER}:${DOMOTICZ_SERVER_HTTPS_PORT}/json.htm?type=devices&rid=${IDX_INPUT}"`

echo "SBFSPOT_DATA: ${SBFSPOT_DATA}"

SMA_HW_TYPE=`echo ${SBFSPOT_DATA} | jq '.result[0].HardwareType'| tr -d '"'`
echo  "SMA_HW_TYPE = ${SMA_HW_TYPE}"

# Check if we have retrieved data from a gas meter
if [ "${SMA_HW_TYPE}" != "${METER_TYPE}" ] 
then
  echo "Error: SMA_HW_TYPE is not [${METER_TYPE}]. Instead it looks like: [${SMA_HW_TYPE}]"
  exit 1
fi

# Fetch data for the total counter
SOLAR_INVERTER_TOTAL_STR=`echo ${SBFSPOT_DATA} | jq '.result[0].Data'| tr -d '"'`
echo "SOLAR_INVERTER_TOTAL_STR: ${SOLAR_INVERTER_TOTAL_STR}"

# SOLAR_INVERTER_TOTAL should now look like: 8389.696 kWh. We plit it. See: https://stackoverflow.com/a/30212526/11062171
read -ra DATA_ARRAY <<<"$SOLAR_INVERTER_TOTAL_STR"
# echo "${DATA_ARRAY}"
SOLAR_INVERTER_TOTAL="${DATA_ARRAY[0]}"

# Fetch data for the day counter
SOLAR_INVERTER_TODAY_STR=`echo ${SBFSPOT_DATA} | jq '.result[0].CounterToday'| tr -d '"'`
echo "SOLAR_INVERTER_TODAY_STR: ${SOLAR_INVERTER_TODAY_STR}"

# SOLAR_INVERTER_TODAY_STR should now look like: 9.696 kWh. We plit it. See: https://stackoverflow.com/a/30212526/11062171
read -ra DATA_ARRAY <<<"$SOLAR_INVERTER_TODAY_STR"
# echo "${DATA_ARRAY}"
SOLAR_INVERTER_TODAY="${DATA_ARRAY[0]}"

if [[ ${SOLAR_INVERTER_TOTAL} =~ ^0 ]]
then	
  echo "Error: value SOLAR_INVERTER_TOTAL is 0. Is most cases that means that Domoticz has no data. Value is: [${SOLAR_INVERTER_TOTAL}]"
  exit 2
fi  

if ! [[ ${SOLAR_INVERTER_TOTAL} =~ ^[0-9]*\.?[0-9]+$ ]]
then
  echo "Error: SOLAR_INVERTER_TOTAL is not a number. Instead it looks like: [${SOLAR_INVERTER_TOTAL}]"
  exit 3
fi
 
if ! [[ ${SOLAR_INVERTER_TODAY} =~ ^[0-9]*\.?[0-9]+$ ]]
then
  echo "Error: SOLAR_INVERTER_TODAY is not a number. Instead it looks like: [${SOLAR_INVERTER_TODAY}]"
  exit 4
fi

# Build JSON by hand ;-)
JSON='{ "idx" : '${IDX_OUTPUT_TOTAL}', "nvalue" : 0, "svalue" :"'${SOLAR_INVERTER_TOTAL}'" }'
echo "JSON: ${JSON}"
mosquitto_pub -h ${MOSQUITTO_SERVER} -p ${MOSQUITTO_PORT} -t "domoticz/in" -m "${JSON}"

# Check exit code from mosquitto_pub command
if [ $? -eq 0 ]
then
   logger -t "domoticz.info" "Successfully uploaded Solar inverter total data to Domoticz."
else
   logger -t "domoticz.error" "Error: Failed to upload Solar inverter total data to Domoticz. Mosquitto exit code = $?"
fi

JSON='{ "idx" : '${IDX_OUTPUT_TODAY}', "nvalue" : 0, "svalue" :"'${SOLAR_INVERTER_TODAY}'" }'
echo "JSON: ${JSON}"
mosquitto_pub -h ${MOSQUITTO_SERVER} -p ${MOSQUITTO_PORT} -t "domoticz/in" -m "${JSON}"

# Check exit code from mosquitto_pub command
if [ $? -eq 0 ]
then
   logger -t "domoticz.info" "Successfully uploaded Solar inverter today data to Domoticz."
else
   logger -t "domoticz.error" "Error: Failed to upload Solar inverter today data to Domoticz. Mosquitto exit code = $?"
fi